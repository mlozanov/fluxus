###############################################################
# SConscript for fluxus-video
#
import os, sys

Import("env", "BinaryModulesLocation", "MZDYN", "static_modules",
		"racket_framework")
venv = env.Clone()

Target = 'fluxus-video_ss'

Source = ['src/Video.cpp',
		'src/FluxusVideo.cpp',
		'src/ofVideoPlayer.cpp',
		'src/ofVideoGrabber.cpp',
		MZDYN]

if venv['PLATFORM'] == 'darwin':
	Source += ['src/ofQtUtils.cpp']
elif venv['PLATFORM'] == 'posix':
	Source += ['src/ofUCUtils.cpp']

# libs to check for
LibList = [['GLEW', 'GL/glew.h']]
Libs = []

Frameworks = []

Requirements = True

if venv['PLATFORM'] == 'darwin':
	Frameworks += ['Carbon', 'QuickTime', 'OpenGL', 'AppKit', 'Foundation']

elif venv['PLATFORM'] == 'posix':
	for pkg in ['gstreamer-0.10', 'gstreamer-video-0.10', 'glib-2.0', 'libunicap',
			'libavformat', 'libavcodec', 'libswscale', 'gstreamer-app-0.10']:
		try:
			venv.MergeFlags('!pkg-config --cflags --libs %s' % pkg)
		except:
			print "ERROR: '%s' must be installed!" % pkg
			Requirements = False

if venv['PLATFORM'] == 'darwin':
	if racket_framework:
		Frameworks += ['Racket']
	else:
		Libs += ['racket3m']
elif venv['PLATFORM'] == 'posix':
	venv.Append(CXXFLAGS = ' -D__STDC_CONSTANT_MACROS')

# check installed libraries
if not GetOption('clean'):
	print 'Checking requirements for', Target, '...'
	conf = Configure(venv)
	for (lib, headers) in LibList:
		if not conf.CheckHeader(headers):
			print "ERROR: '%s' must be installed!" % (lib)
			Requirements = False

	venv = conf.Finish()
	# ... but we shouldn't forget to add them to LIBS manually
	Libs += [rec[0] for rec in LibList]

if venv['PLATFORM'] != 'posix':
	venv.Replace(LIBS = Libs)

# replace libs with static libs if building an osx app
if venv['PLATFORM'] == 'darwin' and GetOption('app') and not GetOption('clean'):
	for l in ['GLEW']:
		venv['LIBS'].remove(l)
		venv['LIBS'].append(File('/opt/local/lib/lib%s.a' % l))

if Requirements:
	if not GetOption('clean'):
		print Target, 'requirements... yes'
	output = venv.SharedLibrary(source = Source, 
					  target = Target,
					  FRAMEWORKS = Frameworks,
					  SHLIBPREFIX = '')

	if not static_modules:
		venv.Install(BinaryModulesLocation, output)
else:
	if not GetOption('clean'):
		print Target, 'requirements... NO'

